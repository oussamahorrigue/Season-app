{"version":3,"sources":["ClockComponent.js","Season.js","Spinner.js","index.js"],"names":["Clock","state","time","setInterval","setState","Date","toLocaleTimeString","className","this","React","Component","SeasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","getMonth","Spinner","class","message","defaultProps","App","latitude","err","window","navigator","geolocation","getCurrentPosition","position","coords","error","ReactDOM","render","document","querySelector"],"mappings":"oNAEMA,E,4MAEFC,MAAQ,CAACC,KAAO,I,uDAEhB,WAAoB,IAAD,OACfC,aAAY,WACR,EAAKC,SAAS,CAAEF,MAAO,IAAIG,MAAOC,yBACpC,O,oBAIN,WAEI,OAAO,sBAAKC,UAAY,OAAjB,qBAAiCC,KAAKP,MAAMC,Y,GAbvCO,IAAMC,WAiBXV,ICfTW,EAAa,CACfC,OAAO,CACHC,KAAO,sBACPC,SAAW,OAEfC,OAAO,CACHF,KAAO,oBACPC,SAAW,cA2BJE,EAdO,SAAAC,GAClB,IATeC,EAAMC,EASfC,GATSF,EASUD,EAAMC,KATVC,GASe,IAAId,MAAOgB,YARnC,GAAKF,EAAQ,EACdD,EAAM,EAAI,SAAU,SAGpBA,EAAM,EAAI,SAAW,UAKhC,EAA0BP,EAAaS,GAAhCP,EAAP,EAAOA,KAAOC,EAAd,EAAcA,SAGd,OAAO,sBAAKP,UAAS,wBAAoBa,GAAlC,UACK,mBAAGb,UAAS,4BAAuBO,EAAvB,WACZ,6BAAKD,IACL,mBAAGN,UAAU,OAAb,SAAoB,cAAC,EAAD,MACpB,mBAAGA,UAAS,6BAAwBO,EAAxB,eC9BtBQ,EAAQ,SAACL,GACX,OAAO,qBAAKV,UAAU,mBAAf,SACK,qBAAKgB,MAAM,iBAAX,SAA6BN,EAAMO,aAKnDF,EAAQG,aAAa,CACjBD,QAAU,WAGCF,QCRTI,E,4MAEEzB,MAAM,CAAE0B,SAAW,KAAKC,IAAI,I,uDAEhC,WAAoB,IAAD,OACfC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAI,EAAK7B,SAAS,CAACuB,SAAWM,EAASC,OAAOP,cACtD,SAAAQ,GAAK,OAAI,EAAK/B,SAAS,CAACwB,IAAKO,EAAMX,e,oBAI3C,WAEQ,OAAIhB,KAAKP,MAAM2B,MAAQpB,KAAKP,MAAM0B,SACtB,2CAAcnB,KAAKP,MAAM2B,QAEhCpB,KAAKP,MAAM2B,KAAOpB,KAAKP,MAAM0B,SACtB,8BAAK,cAAC,EAAD,CAAQT,IAAOV,KAAKP,MAAM0B,aAEpC,8BAAK,cAAC,EAAD,CAASH,QAAU,yC,GAnBzBf,IAAMC,WAyBxB0B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.8c87c9cb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Clock extends React.Component{\r\n\r\n    state = {time : \"\"};\r\n\r\n    componentDidMount(){\r\n        setInterval(()=>{\r\n            this.setState({ time : new Date().toLocaleTimeString() })\r\n        },1000)\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return <div className = \"time\">Time is {this.state.time}</div>\r\n    }\r\n\r\n}\r\nexport default Clock;","import React from \"react\";\r\nimport './Season.css';\r\nimport Clock from \"./ClockComponent\";\r\n\r\nconst SeasonConfig={\r\n    summer:{\r\n        text : \"Let's hit the beach\",\r\n        iconName : \"sun\"\r\n    },\r\n    winter:{\r\n        text : \"Burr, it's chilly\",\r\n        iconName : \"snowflake\"\r\n    }\r\n}\r\n\r\n\r\nconst getSeason = (lat , month) => {\r\n    if (month > 2 && month < 9 ){\r\n        return lat > 0 ? 'summer' :'winter';\r\n    }\r\n    else{\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n};\r\nconst SeasonDisplay = props => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const {text , iconName} = SeasonConfig[season]\r\n//{`${icon} icon`}\r\n\r\n    return <div className= {`seasondisplay ${season}`}>\r\n                <i className={`icon-left massive ${iconName} icon`}/>\r\n                <h1>{text}</h1>\r\n                <p className='time'><Clock/></p>\r\n                <i className={`icon-right massive ${iconName} icon`}/>\r\n            </div>\r\n\r\n\r\n}\r\nexport default SeasonDisplay;","import React from \"react\";\r\n\r\n\r\nconst Spinner=(props)=>{\r\n    return <div className=\"ui active dimmer\">\r\n                <div class=\"ui text loader\">{props.message}</div>\r\n        </div>\r\n    \r\n}\r\n\r\nSpinner.defaultProps={\r\n    message : \"Loading\",\r\n}\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Season from \"./Season\";\r\nimport Spinner from \"./Spinner\";\r\nimport Clock from \"./ClockComponent\";\r\n\r\nclass App extends React.Component{\r\n\r\n        state={ latitude : null,err:''};\r\n        \r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => this.setState({latitude : position.coords.latitude}),\r\n            error => this.setState({err: error.message})\r\n        )\r\n    }\r\n\r\n    render(){\r\n        \r\n            if (this.state.err && !this.state.latitude){\r\n                return (<div>Error : {this.state.err}</div>);\r\n            }\r\n            if (!this.state.err && this.state.latitude){\r\n                return (<div><Season lat = {this.state.latitude}/></div>);\r\n            }\r\n            return <div><Spinner message = \"Please accept default location\"/></div>\r\n            \r\n      \r\n    }\r\n}\r\n\r\nReactDOM.render(<App/> , document.querySelector('#root'))\r\n\r\n"],"sourceRoot":""}